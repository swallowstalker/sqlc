// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package crud

import (
	"context"

	"liucai.com/zjbmis/schema"
)

const getFundSummary = `-- name: GetFundSummary :one
SELECT id,
       name,
       extent
FROM auth_user
WHERE id = $1
    LIMIT 1
`

type GetFundSummaryRow struct {
	ID     int32              `json:"id"`
	Name   string             `json:"name"`
	Extent schema.FundSummary `json:"extent"`
}

func (q *Queries) GetFundSummary(ctx context.Context, id int32) (*GetFundSummaryRow, error) {
	row := q.db.QueryRow(ctx, getFundSummary, id)
	var i GetFundSummaryRow
	err := row.Scan(&i.ID, &i.Name, &i.Extent)
	return &i, err
}

const selectFundSummary = `-- name: SelectFundSummary :many
SELECT name,
       extent
FROM auth_user
WHERE user_type = 'manager'
ORDER BY name
`

type SelectFundSummaryRow struct {
	Name   string             `json:"name"`
	Extent schema.FundSummary `json:"extent"`
}

func (q *Queries) SelectFundSummary(ctx context.Context) ([]*SelectFundSummaryRow, error) {
	rows, err := q.db.Query(ctx, selectFundSummary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SelectFundSummaryRow
	for rows.Next() {
		var i SelectFundSummaryRow
		if err := rows.Scan(&i.Name, &i.Extent); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
